// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections;
using System.Collections.Generic;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace QuestionPool.Models
{
    public partial class QuestionPoolDatabaseContext : IdentityDbContext
    {
        public QuestionPoolDatabaseContext()
        {
        }

        public QuestionPoolDatabaseContext(DbContextOptions<QuestionPoolDatabaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<ExamPaperDetails> ExamPaperDetails { get; set; }
        public virtual DbSet<ExamPapers> ExamPapers { get; set; }
        public virtual DbSet<ExamType> ExamType { get; set; }
        public virtual DbSet<Question> Question { get; set; }
        public virtual DbSet<QuestionAnswer> QuestionAnswer { get; set; }
        public virtual DbSet<Subjects> Subjects { get; set; }
        public virtual DbSet<Terms> Terms { get; set; }
        public virtual DbSet<UserDetails> UserDetails { get; set; }
        public IEnumerable AspNetUsers { get; internal set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<IdentityUserLogin<string>>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId });
            });
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=QuestionPool.Database;Integrated Security=true");

            modelBuilder.Entity<ExamPaperDetails>(entity =>
            {
                entity.Property(e => e.Title).IsRequired();

                entity.HasOne(d => d.ExamPaper)
                    .WithMany(p => p.ExamPaperDetails)
                    .HasForeignKey(d => d.ExamPaperId)
                    .HasConstraintName("FK_ExamPaperDetails_ToExamPapers");

                entity.HasOne(d => d.Question)
                    .WithMany(p => p.ExamPaperDetails)
                    .HasForeignKey(d => d.QuestionId)
                    .HasConstraintName("FK_ExamPaperDetails_ToQuestion");
            });

            modelBuilder.Entity<ExamPapers>(entity =>
            {
                entity.Property(e => e.DateAdded).HasColumnType("datetime");
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.HasIndex(e => e.ExamTypeId, "IX_Question_ExamType");

                entity.Property(e => e.DataAdded).HasColumnType("datetime");

                entity.Property(e => e.Year).HasColumnType("date");


                entity.HasOne(d => d.CreatedByUserDetails)
                    .WithMany(p => p.Question)
                    .HasForeignKey(d => d.CreatedByUserDetailsId)
                    .HasConstraintName("FK_Question_ToUserDetails");

                entity.HasOne(d => d.ExamType)
                    .WithMany(p => p.Question)
                    .HasForeignKey(d => d.ExamTypeId)
                    .HasConstraintName("FK_Question_ToExamType");

                entity.HasOne(d => d.Subject)
                    .WithMany(p => p.Question)
                    .HasForeignKey(d => d.SubjectId)
                    .HasConstraintName("FK_Question_ToSubjects");

                entity.HasOne(d => d.Term)
                    .WithMany(p => p.Question)
                    .HasForeignKey(d => d.TermId)
                    .HasConstraintName("FK_Question_ToTerms");

            });

            modelBuilder.Entity<QuestionAnswer>(entity =>
            {
                entity.HasIndex(e => e.QuestionId, "IX_QuestionAnswer_QuestionId");

                entity.HasOne(d => d.Question)
                    .WithMany(p => p.QuestionAnswer)
                    .HasForeignKey(d => d.QuestionId)
                    .HasConstraintName("FK_QuestionAnswer_ToQuestion");
            });

            modelBuilder.Entity<Subjects>(entity =>
            {
                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.SubjectCode).IsRequired();
            });

            modelBuilder.Entity<UserDetails>(entity =>
            {

                entity.Property(e => e.AspNetUserId)
                .IsRequired()
                .HasMaxLength(450);

                entity.HasOne<IdentityUser>()
                .WithMany()
                .HasForeignKey(d => d.AspNetUserId)
                .HasConstraintName("FK_UserDetails_AspNetUsers");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.UserDetails)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_UserDetails_ToDepartment");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}